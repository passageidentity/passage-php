<?php
/**
 * AppInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Passage Management API
 *
 * Passage's management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AppInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AppInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AppInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional_auth_origins' => 'string[]',
        'allowed_callback_urls' => 'string[]',
        'allowed_identifier' => 'string',
        'allowed_logout_urls' => 'string[]',
        'application_login_uri' => 'string',
        'auth_fallback_method' => 'string',
        'auth_fallback_method_ttl' => 'int',
        'auth_origin' => 'string',
        'created_at' => '\DateTime',
        'default_language' => 'string',
        'id' => 'string',
        'layouts' => '\OpenAPI\Client\Model\Layouts',
        'login_url' => 'string',
        'light_logo_url' => 'string',
        'dark_logo_url' => 'string',
        'name' => 'string',
        'hosted' => 'bool',
        'hosted_subdomain' => 'string',
        'id_token_lifetime' => 'int',
        'passage_branding' => 'bool',
        'profile_management' => 'bool',
        'public_signup' => 'bool',
        'redirect_url' => 'string',
        'refresh_absolute_lifetime' => 'int',
        'refresh_enabled' => 'bool',
        'refresh_inactivity_lifetime' => 'int',
        'require_email_verification' => 'bool',
        'require_identifier_verification' => 'bool',
        'required_identifier' => 'string',
        'role' => 'string',
        'rsa_public_key' => 'string',
        'secret' => 'string',
        'session_timeout_length' => 'int',
        'type' => 'string',
        'user_metadata_schema' => '\OpenAPI\Client\Model\UserMetadataField[]',
        'technologies' => '\OpenAPI\Client\Model\Technologies[]',
        'element_customization' => '\OpenAPI\Client\Model\ElementCustomization',
        'element_customization_dark' => '\OpenAPI\Client\Model\ElementCustomization'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additional_auth_origins' => null,
        'allowed_callback_urls' => null,
        'allowed_identifier' => null,
        'allowed_logout_urls' => null,
        'application_login_uri' => null,
        'auth_fallback_method' => null,
        'auth_fallback_method_ttl' => null,
        'auth_origin' => null,
        'created_at' => 'date-time',
        'default_language' => null,
        'id' => null,
        'layouts' => null,
        'login_url' => null,
        'light_logo_url' => null,
        'dark_logo_url' => null,
        'name' => null,
        'hosted' => null,
        'hosted_subdomain' => null,
        'id_token_lifetime' => null,
        'passage_branding' => null,
        'profile_management' => null,
        'public_signup' => null,
        'redirect_url' => null,
        'refresh_absolute_lifetime' => null,
        'refresh_enabled' => null,
        'refresh_inactivity_lifetime' => null,
        'require_email_verification' => null,
        'require_identifier_verification' => null,
        'required_identifier' => null,
        'role' => null,
        'rsa_public_key' => null,
        'secret' => null,
        'session_timeout_length' => null,
        'type' => null,
        'user_metadata_schema' => null,
        'technologies' => null,
        'element_customization' => null,
        'element_customization_dark' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additional_auth_origins' => false,
		'allowed_callback_urls' => false,
		'allowed_identifier' => false,
		'allowed_logout_urls' => false,
		'application_login_uri' => false,
		'auth_fallback_method' => false,
		'auth_fallback_method_ttl' => false,
		'auth_origin' => false,
		'created_at' => false,
		'default_language' => false,
		'id' => false,
		'layouts' => false,
		'login_url' => false,
		'light_logo_url' => false,
		'dark_logo_url' => false,
		'name' => false,
		'hosted' => false,
		'hosted_subdomain' => false,
		'id_token_lifetime' => false,
		'passage_branding' => false,
		'profile_management' => false,
		'public_signup' => false,
		'redirect_url' => false,
		'refresh_absolute_lifetime' => false,
		'refresh_enabled' => false,
		'refresh_inactivity_lifetime' => false,
		'require_email_verification' => false,
		'require_identifier_verification' => false,
		'required_identifier' => false,
		'role' => false,
		'rsa_public_key' => false,
		'secret' => false,
		'session_timeout_length' => false,
		'type' => false,
		'user_metadata_schema' => false,
		'technologies' => false,
		'element_customization' => false,
		'element_customization_dark' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_auth_origins' => 'additional_auth_origins',
        'allowed_callback_urls' => 'allowed_callback_urls',
        'allowed_identifier' => 'allowed_identifier',
        'allowed_logout_urls' => 'allowed_logout_urls',
        'application_login_uri' => 'application_login_uri',
        'auth_fallback_method' => 'auth_fallback_method',
        'auth_fallback_method_ttl' => 'auth_fallback_method_ttl',
        'auth_origin' => 'auth_origin',
        'created_at' => 'created_at',
        'default_language' => 'default_language',
        'id' => 'id',
        'layouts' => 'layouts',
        'login_url' => 'login_url',
        'light_logo_url' => 'light_logo_url',
        'dark_logo_url' => 'dark_logo_url',
        'name' => 'name',
        'hosted' => 'hosted',
        'hosted_subdomain' => 'hosted_subdomain',
        'id_token_lifetime' => 'id_token_lifetime',
        'passage_branding' => 'passage_branding',
        'profile_management' => 'profile_management',
        'public_signup' => 'public_signup',
        'redirect_url' => 'redirect_url',
        'refresh_absolute_lifetime' => 'refresh_absolute_lifetime',
        'refresh_enabled' => 'refresh_enabled',
        'refresh_inactivity_lifetime' => 'refresh_inactivity_lifetime',
        'require_email_verification' => 'require_email_verification',
        'require_identifier_verification' => 'require_identifier_verification',
        'required_identifier' => 'required_identifier',
        'role' => 'role',
        'rsa_public_key' => 'rsa_public_key',
        'secret' => 'secret',
        'session_timeout_length' => 'session_timeout_length',
        'type' => 'type',
        'user_metadata_schema' => 'user_metadata_schema',
        'technologies' => 'technologies',
        'element_customization' => 'element_customization',
        'element_customization_dark' => 'element_customization_dark'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_auth_origins' => 'setAdditionalAuthOrigins',
        'allowed_callback_urls' => 'setAllowedCallbackUrls',
        'allowed_identifier' => 'setAllowedIdentifier',
        'allowed_logout_urls' => 'setAllowedLogoutUrls',
        'application_login_uri' => 'setApplicationLoginUri',
        'auth_fallback_method' => 'setAuthFallbackMethod',
        'auth_fallback_method_ttl' => 'setAuthFallbackMethodTtl',
        'auth_origin' => 'setAuthOrigin',
        'created_at' => 'setCreatedAt',
        'default_language' => 'setDefaultLanguage',
        'id' => 'setId',
        'layouts' => 'setLayouts',
        'login_url' => 'setLoginUrl',
        'light_logo_url' => 'setLightLogoUrl',
        'dark_logo_url' => 'setDarkLogoUrl',
        'name' => 'setName',
        'hosted' => 'setHosted',
        'hosted_subdomain' => 'setHostedSubdomain',
        'id_token_lifetime' => 'setIdTokenLifetime',
        'passage_branding' => 'setPassageBranding',
        'profile_management' => 'setProfileManagement',
        'public_signup' => 'setPublicSignup',
        'redirect_url' => 'setRedirectUrl',
        'refresh_absolute_lifetime' => 'setRefreshAbsoluteLifetime',
        'refresh_enabled' => 'setRefreshEnabled',
        'refresh_inactivity_lifetime' => 'setRefreshInactivityLifetime',
        'require_email_verification' => 'setRequireEmailVerification',
        'require_identifier_verification' => 'setRequireIdentifierVerification',
        'required_identifier' => 'setRequiredIdentifier',
        'role' => 'setRole',
        'rsa_public_key' => 'setRsaPublicKey',
        'secret' => 'setSecret',
        'session_timeout_length' => 'setSessionTimeoutLength',
        'type' => 'setType',
        'user_metadata_schema' => 'setUserMetadataSchema',
        'technologies' => 'setTechnologies',
        'element_customization' => 'setElementCustomization',
        'element_customization_dark' => 'setElementCustomizationDark'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_auth_origins' => 'getAdditionalAuthOrigins',
        'allowed_callback_urls' => 'getAllowedCallbackUrls',
        'allowed_identifier' => 'getAllowedIdentifier',
        'allowed_logout_urls' => 'getAllowedLogoutUrls',
        'application_login_uri' => 'getApplicationLoginUri',
        'auth_fallback_method' => 'getAuthFallbackMethod',
        'auth_fallback_method_ttl' => 'getAuthFallbackMethodTtl',
        'auth_origin' => 'getAuthOrigin',
        'created_at' => 'getCreatedAt',
        'default_language' => 'getDefaultLanguage',
        'id' => 'getId',
        'layouts' => 'getLayouts',
        'login_url' => 'getLoginUrl',
        'light_logo_url' => 'getLightLogoUrl',
        'dark_logo_url' => 'getDarkLogoUrl',
        'name' => 'getName',
        'hosted' => 'getHosted',
        'hosted_subdomain' => 'getHostedSubdomain',
        'id_token_lifetime' => 'getIdTokenLifetime',
        'passage_branding' => 'getPassageBranding',
        'profile_management' => 'getProfileManagement',
        'public_signup' => 'getPublicSignup',
        'redirect_url' => 'getRedirectUrl',
        'refresh_absolute_lifetime' => 'getRefreshAbsoluteLifetime',
        'refresh_enabled' => 'getRefreshEnabled',
        'refresh_inactivity_lifetime' => 'getRefreshInactivityLifetime',
        'require_email_verification' => 'getRequireEmailVerification',
        'require_identifier_verification' => 'getRequireIdentifierVerification',
        'required_identifier' => 'getRequiredIdentifier',
        'role' => 'getRole',
        'rsa_public_key' => 'getRsaPublicKey',
        'secret' => 'getSecret',
        'session_timeout_length' => 'getSessionTimeoutLength',
        'type' => 'getType',
        'user_metadata_schema' => 'getUserMetadataSchema',
        'technologies' => 'getTechnologies',
        'element_customization' => 'getElementCustomization',
        'element_customization_dark' => 'getElementCustomizationDark'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_COMPLETE = 'complete';
    public const TYPE_FLEX = 'flex';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_COMPLETE,
            self::TYPE_FLEX,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additional_auth_origins', $data ?? [], null);
        $this->setIfExists('allowed_callback_urls', $data ?? [], null);
        $this->setIfExists('allowed_identifier', $data ?? [], null);
        $this->setIfExists('allowed_logout_urls', $data ?? [], null);
        $this->setIfExists('application_login_uri', $data ?? [], null);
        $this->setIfExists('auth_fallback_method', $data ?? [], null);
        $this->setIfExists('auth_fallback_method_ttl', $data ?? [], null);
        $this->setIfExists('auth_origin', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('default_language', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('layouts', $data ?? [], null);
        $this->setIfExists('login_url', $data ?? [], null);
        $this->setIfExists('light_logo_url', $data ?? [], null);
        $this->setIfExists('dark_logo_url', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('hosted', $data ?? [], null);
        $this->setIfExists('hosted_subdomain', $data ?? [], null);
        $this->setIfExists('id_token_lifetime', $data ?? [], null);
        $this->setIfExists('passage_branding', $data ?? [], null);
        $this->setIfExists('profile_management', $data ?? [], null);
        $this->setIfExists('public_signup', $data ?? [], null);
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('refresh_absolute_lifetime', $data ?? [], null);
        $this->setIfExists('refresh_enabled', $data ?? [], null);
        $this->setIfExists('refresh_inactivity_lifetime', $data ?? [], null);
        $this->setIfExists('require_email_verification', $data ?? [], null);
        $this->setIfExists('require_identifier_verification', $data ?? [], null);
        $this->setIfExists('required_identifier', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('rsa_public_key', $data ?? [], null);
        $this->setIfExists('secret', $data ?? [], null);
        $this->setIfExists('session_timeout_length', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('user_metadata_schema', $data ?? [], null);
        $this->setIfExists('technologies', $data ?? [], null);
        $this->setIfExists('element_customization', $data ?? [], null);
        $this->setIfExists('element_customization_dark', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['additional_auth_origins'] === null) {
            $invalidProperties[] = "'additional_auth_origins' can't be null";
        }
        if ($this->container['allowed_callback_urls'] === null) {
            $invalidProperties[] = "'allowed_callback_urls' can't be null";
        }
        if ($this->container['allowed_identifier'] === null) {
            $invalidProperties[] = "'allowed_identifier' can't be null";
        }
        if ($this->container['allowed_logout_urls'] === null) {
            $invalidProperties[] = "'allowed_logout_urls' can't be null";
        }
        if ($this->container['application_login_uri'] === null) {
            $invalidProperties[] = "'application_login_uri' can't be null";
        }
        if ($this->container['auth_fallback_method'] === null) {
            $invalidProperties[] = "'auth_fallback_method' can't be null";
        }
        if ($this->container['auth_fallback_method_ttl'] === null) {
            $invalidProperties[] = "'auth_fallback_method_ttl' can't be null";
        }
        if ($this->container['auth_origin'] === null) {
            $invalidProperties[] = "'auth_origin' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['default_language'] === null) {
            $invalidProperties[] = "'default_language' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['layouts'] === null) {
            $invalidProperties[] = "'layouts' can't be null";
        }
        if ($this->container['login_url'] === null) {
            $invalidProperties[] = "'login_url' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['hosted'] === null) {
            $invalidProperties[] = "'hosted' can't be null";
        }
        if ($this->container['hosted_subdomain'] === null) {
            $invalidProperties[] = "'hosted_subdomain' can't be null";
        }
        if ($this->container['passage_branding'] === null) {
            $invalidProperties[] = "'passage_branding' can't be null";
        }
        if ($this->container['profile_management'] === null) {
            $invalidProperties[] = "'profile_management' can't be null";
        }
        if ($this->container['public_signup'] === null) {
            $invalidProperties[] = "'public_signup' can't be null";
        }
        if ($this->container['redirect_url'] === null) {
            $invalidProperties[] = "'redirect_url' can't be null";
        }
        if ($this->container['refresh_absolute_lifetime'] === null) {
            $invalidProperties[] = "'refresh_absolute_lifetime' can't be null";
        }
        if ($this->container['refresh_enabled'] === null) {
            $invalidProperties[] = "'refresh_enabled' can't be null";
        }
        if ($this->container['refresh_inactivity_lifetime'] === null) {
            $invalidProperties[] = "'refresh_inactivity_lifetime' can't be null";
        }
        if ($this->container['require_email_verification'] === null) {
            $invalidProperties[] = "'require_email_verification' can't be null";
        }
        if ($this->container['require_identifier_verification'] === null) {
            $invalidProperties[] = "'require_identifier_verification' can't be null";
        }
        if ($this->container['required_identifier'] === null) {
            $invalidProperties[] = "'required_identifier' can't be null";
        }
        if ($this->container['role'] === null) {
            $invalidProperties[] = "'role' can't be null";
        }
        if ($this->container['rsa_public_key'] === null) {
            $invalidProperties[] = "'rsa_public_key' can't be null";
        }
        if ($this->container['session_timeout_length'] === null) {
            $invalidProperties[] = "'session_timeout_length' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['user_metadata_schema'] === null) {
            $invalidProperties[] = "'user_metadata_schema' can't be null";
        }
        if ($this->container['technologies'] === null) {
            $invalidProperties[] = "'technologies' can't be null";
        }
        if ($this->container['element_customization'] === null) {
            $invalidProperties[] = "'element_customization' can't be null";
        }
        if ($this->container['element_customization_dark'] === null) {
            $invalidProperties[] = "'element_customization_dark' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_auth_origins
     *
     * @return string[]
     */
    public function getAdditionalAuthOrigins()
    {
        return $this->container['additional_auth_origins'];
    }

    /**
     * Sets additional_auth_origins
     *
     * @param string[] $additional_auth_origins additional_auth_origins
     *
     * @return self
     */
    public function setAdditionalAuthOrigins($additional_auth_origins)
    {
        if (is_null($additional_auth_origins)) {
            throw new \InvalidArgumentException('non-nullable additional_auth_origins cannot be null');
        }
        $this->container['additional_auth_origins'] = $additional_auth_origins;

        return $this;
    }

    /**
     * Gets allowed_callback_urls
     *
     * @return string[]
     */
    public function getAllowedCallbackUrls()
    {
        return $this->container['allowed_callback_urls'];
    }

    /**
     * Sets allowed_callback_urls
     *
     * @param string[] $allowed_callback_urls The valid URLs where users can be redirected after authentication.
     *
     * @return self
     */
    public function setAllowedCallbackUrls($allowed_callback_urls)
    {
        if (is_null($allowed_callback_urls)) {
            throw new \InvalidArgumentException('non-nullable allowed_callback_urls cannot be null');
        }
        $this->container['allowed_callback_urls'] = $allowed_callback_urls;

        return $this;
    }

    /**
     * Gets allowed_identifier
     *
     * @return string
     */
    public function getAllowedIdentifier()
    {
        return $this->container['allowed_identifier'];
    }

    /**
     * Sets allowed_identifier
     *
     * @param string $allowed_identifier allowed_identifier
     *
     * @return self
     */
    public function setAllowedIdentifier($allowed_identifier)
    {
        if (is_null($allowed_identifier)) {
            throw new \InvalidArgumentException('non-nullable allowed_identifier cannot be null');
        }
        $this->container['allowed_identifier'] = $allowed_identifier;

        return $this;
    }

    /**
     * Gets allowed_logout_urls
     *
     * @return string[]
     */
    public function getAllowedLogoutUrls()
    {
        return $this->container['allowed_logout_urls'];
    }

    /**
     * Sets allowed_logout_urls
     *
     * @param string[] $allowed_logout_urls The valid URLs where users can be redirected after logging out.
     *
     * @return self
     */
    public function setAllowedLogoutUrls($allowed_logout_urls)
    {
        if (is_null($allowed_logout_urls)) {
            throw new \InvalidArgumentException('non-nullable allowed_logout_urls cannot be null');
        }
        $this->container['allowed_logout_urls'] = $allowed_logout_urls;

        return $this;
    }

    /**
     * Gets application_login_uri
     *
     * @return string
     */
    public function getApplicationLoginUri()
    {
        return $this->container['application_login_uri'];
    }

    /**
     * Sets application_login_uri
     *
     * @param string $application_login_uri A route within your application that redirects to the Authorization URL endpoint.
     *
     * @return self
     */
    public function setApplicationLoginUri($application_login_uri)
    {
        if (is_null($application_login_uri)) {
            throw new \InvalidArgumentException('non-nullable application_login_uri cannot be null');
        }
        $this->container['application_login_uri'] = $application_login_uri;

        return $this;
    }

    /**
     * Gets auth_fallback_method
     *
     * @return string
     */
    public function getAuthFallbackMethod()
    {
        return $this->container['auth_fallback_method'];
    }

    /**
     * Sets auth_fallback_method
     *
     * @param string $auth_fallback_method auth_fallback_method
     *
     * @return self
     */
    public function setAuthFallbackMethod($auth_fallback_method)
    {
        if (is_null($auth_fallback_method)) {
            throw new \InvalidArgumentException('non-nullable auth_fallback_method cannot be null');
        }
        $this->container['auth_fallback_method'] = $auth_fallback_method;

        return $this;
    }

    /**
     * Gets auth_fallback_method_ttl
     *
     * @return int
     */
    public function getAuthFallbackMethodTtl()
    {
        return $this->container['auth_fallback_method_ttl'];
    }

    /**
     * Sets auth_fallback_method_ttl
     *
     * @param int $auth_fallback_method_ttl auth_fallback_method_ttl
     *
     * @return self
     */
    public function setAuthFallbackMethodTtl($auth_fallback_method_ttl)
    {
        if (is_null($auth_fallback_method_ttl)) {
            throw new \InvalidArgumentException('non-nullable auth_fallback_method_ttl cannot be null');
        }
        $this->container['auth_fallback_method_ttl'] = $auth_fallback_method_ttl;

        return $this;
    }

    /**
     * Gets auth_origin
     *
     * @return string
     */
    public function getAuthOrigin()
    {
        return $this->container['auth_origin'];
    }

    /**
     * Sets auth_origin
     *
     * @param string $auth_origin auth_origin
     *
     * @return self
     */
    public function setAuthOrigin($auth_origin)
    {
        if (is_null($auth_origin)) {
            throw new \InvalidArgumentException('non-nullable auth_origin cannot be null');
        }
        $this->container['auth_origin'] = $auth_origin;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets default_language
     *
     * @return string
     */
    public function getDefaultLanguage()
    {
        return $this->container['default_language'];
    }

    /**
     * Sets default_language
     *
     * @param string $default_language default_language
     *
     * @return self
     */
    public function setDefaultLanguage($default_language)
    {
        if (is_null($default_language)) {
            throw new \InvalidArgumentException('non-nullable default_language cannot be null');
        }
        $this->container['default_language'] = $default_language;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets layouts
     *
     * @return \OpenAPI\Client\Model\Layouts
     */
    public function getLayouts()
    {
        return $this->container['layouts'];
    }

    /**
     * Sets layouts
     *
     * @param \OpenAPI\Client\Model\Layouts $layouts layouts
     *
     * @return self
     */
    public function setLayouts($layouts)
    {
        if (is_null($layouts)) {
            throw new \InvalidArgumentException('non-nullable layouts cannot be null');
        }
        $this->container['layouts'] = $layouts;

        return $this;
    }

    /**
     * Gets login_url
     *
     * @return string
     */
    public function getLoginUrl()
    {
        return $this->container['login_url'];
    }

    /**
     * Sets login_url
     *
     * @param string $login_url login_url
     *
     * @return self
     */
    public function setLoginUrl($login_url)
    {
        if (is_null($login_url)) {
            throw new \InvalidArgumentException('non-nullable login_url cannot be null');
        }
        $this->container['login_url'] = $login_url;

        return $this;
    }

    /**
     * Gets light_logo_url
     *
     * @return string|null
     */
    public function getLightLogoUrl()
    {
        return $this->container['light_logo_url'];
    }

    /**
     * Sets light_logo_url
     *
     * @param string|null $light_logo_url light_logo_url
     *
     * @return self
     */
    public function setLightLogoUrl($light_logo_url)
    {
        if (is_null($light_logo_url)) {
            throw new \InvalidArgumentException('non-nullable light_logo_url cannot be null');
        }
        $this->container['light_logo_url'] = $light_logo_url;

        return $this;
    }

    /**
     * Gets dark_logo_url
     *
     * @return string|null
     */
    public function getDarkLogoUrl()
    {
        return $this->container['dark_logo_url'];
    }

    /**
     * Sets dark_logo_url
     *
     * @param string|null $dark_logo_url dark_logo_url
     *
     * @return self
     */
    public function setDarkLogoUrl($dark_logo_url)
    {
        if (is_null($dark_logo_url)) {
            throw new \InvalidArgumentException('non-nullable dark_logo_url cannot be null');
        }
        $this->container['dark_logo_url'] = $dark_logo_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets hosted
     *
     * @return bool
     */
    public function getHosted()
    {
        return $this->container['hosted'];
    }

    /**
     * Sets hosted
     *
     * @param bool $hosted whether or not the app's login page hosted by passage
     *
     * @return self
     */
    public function setHosted($hosted)
    {
        if (is_null($hosted)) {
            throw new \InvalidArgumentException('non-nullable hosted cannot be null');
        }
        $this->container['hosted'] = $hosted;

        return $this;
    }

    /**
     * Gets hosted_subdomain
     *
     * @return string
     */
    public function getHostedSubdomain()
    {
        return $this->container['hosted_subdomain'];
    }

    /**
     * Sets hosted_subdomain
     *
     * @param string $hosted_subdomain the subdomain of the app's hosted login page
     *
     * @return self
     */
    public function setHostedSubdomain($hosted_subdomain)
    {
        if (is_null($hosted_subdomain)) {
            throw new \InvalidArgumentException('non-nullable hosted_subdomain cannot be null');
        }
        $this->container['hosted_subdomain'] = $hosted_subdomain;

        return $this;
    }

    /**
     * Gets id_token_lifetime
     *
     * @return int|null
     */
    public function getIdTokenLifetime()
    {
        return $this->container['id_token_lifetime'];
    }

    /**
     * Sets id_token_lifetime
     *
     * @param int|null $id_token_lifetime id_token_lifetime
     *
     * @return self
     */
    public function setIdTokenLifetime($id_token_lifetime)
    {
        if (is_null($id_token_lifetime)) {
            throw new \InvalidArgumentException('non-nullable id_token_lifetime cannot be null');
        }
        $this->container['id_token_lifetime'] = $id_token_lifetime;

        return $this;
    }

    /**
     * Gets passage_branding
     *
     * @return bool
     */
    public function getPassageBranding()
    {
        return $this->container['passage_branding'];
    }

    /**
     * Sets passage_branding
     *
     * @param bool $passage_branding passage_branding
     *
     * @return self
     */
    public function setPassageBranding($passage_branding)
    {
        if (is_null($passage_branding)) {
            throw new \InvalidArgumentException('non-nullable passage_branding cannot be null');
        }
        $this->container['passage_branding'] = $passage_branding;

        return $this;
    }

    /**
     * Gets profile_management
     *
     * @return bool
     */
    public function getProfileManagement()
    {
        return $this->container['profile_management'];
    }

    /**
     * Sets profile_management
     *
     * @param bool $profile_management profile_management
     *
     * @return self
     */
    public function setProfileManagement($profile_management)
    {
        if (is_null($profile_management)) {
            throw new \InvalidArgumentException('non-nullable profile_management cannot be null');
        }
        $this->container['profile_management'] = $profile_management;

        return $this;
    }

    /**
     * Gets public_signup
     *
     * @return bool
     */
    public function getPublicSignup()
    {
        return $this->container['public_signup'];
    }

    /**
     * Sets public_signup
     *
     * @param bool $public_signup public_signup
     *
     * @return self
     */
    public function setPublicSignup($public_signup)
    {
        if (is_null($public_signup)) {
            throw new \InvalidArgumentException('non-nullable public_signup cannot be null');
        }
        $this->container['public_signup'] = $public_signup;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string $redirect_url redirect_url
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            throw new \InvalidArgumentException('non-nullable redirect_url cannot be null');
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets refresh_absolute_lifetime
     *
     * @return int
     */
    public function getRefreshAbsoluteLifetime()
    {
        return $this->container['refresh_absolute_lifetime'];
    }

    /**
     * Sets refresh_absolute_lifetime
     *
     * @param int $refresh_absolute_lifetime refresh_absolute_lifetime
     *
     * @return self
     */
    public function setRefreshAbsoluteLifetime($refresh_absolute_lifetime)
    {
        if (is_null($refresh_absolute_lifetime)) {
            throw new \InvalidArgumentException('non-nullable refresh_absolute_lifetime cannot be null');
        }
        $this->container['refresh_absolute_lifetime'] = $refresh_absolute_lifetime;

        return $this;
    }

    /**
     * Gets refresh_enabled
     *
     * @return bool
     */
    public function getRefreshEnabled()
    {
        return $this->container['refresh_enabled'];
    }

    /**
     * Sets refresh_enabled
     *
     * @param bool $refresh_enabled refresh_enabled
     *
     * @return self
     */
    public function setRefreshEnabled($refresh_enabled)
    {
        if (is_null($refresh_enabled)) {
            throw new \InvalidArgumentException('non-nullable refresh_enabled cannot be null');
        }
        $this->container['refresh_enabled'] = $refresh_enabled;

        return $this;
    }

    /**
     * Gets refresh_inactivity_lifetime
     *
     * @return int
     */
    public function getRefreshInactivityLifetime()
    {
        return $this->container['refresh_inactivity_lifetime'];
    }

    /**
     * Sets refresh_inactivity_lifetime
     *
     * @param int $refresh_inactivity_lifetime refresh_inactivity_lifetime
     *
     * @return self
     */
    public function setRefreshInactivityLifetime($refresh_inactivity_lifetime)
    {
        if (is_null($refresh_inactivity_lifetime)) {
            throw new \InvalidArgumentException('non-nullable refresh_inactivity_lifetime cannot be null');
        }
        $this->container['refresh_inactivity_lifetime'] = $refresh_inactivity_lifetime;

        return $this;
    }

    /**
     * Gets require_email_verification
     *
     * @return bool
     */
    public function getRequireEmailVerification()
    {
        return $this->container['require_email_verification'];
    }

    /**
     * Sets require_email_verification
     *
     * @param bool $require_email_verification require_email_verification
     *
     * @return self
     */
    public function setRequireEmailVerification($require_email_verification)
    {
        if (is_null($require_email_verification)) {
            throw new \InvalidArgumentException('non-nullable require_email_verification cannot be null');
        }
        $this->container['require_email_verification'] = $require_email_verification;

        return $this;
    }

    /**
     * Gets require_identifier_verification
     *
     * @return bool
     */
    public function getRequireIdentifierVerification()
    {
        return $this->container['require_identifier_verification'];
    }

    /**
     * Sets require_identifier_verification
     *
     * @param bool $require_identifier_verification require_identifier_verification
     *
     * @return self
     */
    public function setRequireIdentifierVerification($require_identifier_verification)
    {
        if (is_null($require_identifier_verification)) {
            throw new \InvalidArgumentException('non-nullable require_identifier_verification cannot be null');
        }
        $this->container['require_identifier_verification'] = $require_identifier_verification;

        return $this;
    }

    /**
     * Gets required_identifier
     *
     * @return string
     */
    public function getRequiredIdentifier()
    {
        return $this->container['required_identifier'];
    }

    /**
     * Sets required_identifier
     *
     * @param string $required_identifier required_identifier
     *
     * @return self
     */
    public function setRequiredIdentifier($required_identifier)
    {
        if (is_null($required_identifier)) {
            throw new \InvalidArgumentException('non-nullable required_identifier cannot be null');
        }
        $this->container['required_identifier'] = $required_identifier;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets rsa_public_key
     *
     * @return string
     */
    public function getRsaPublicKey()
    {
        return $this->container['rsa_public_key'];
    }

    /**
     * Sets rsa_public_key
     *
     * @param string $rsa_public_key rsa_public_key
     *
     * @return self
     */
    public function setRsaPublicKey($rsa_public_key)
    {
        if (is_null($rsa_public_key)) {
            throw new \InvalidArgumentException('non-nullable rsa_public_key cannot be null');
        }
        $this->container['rsa_public_key'] = $rsa_public_key;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string|null
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string|null $secret can only be retrieved by an app admin
     *
     * @return self
     */
    public function setSecret($secret)
    {
        if (is_null($secret)) {
            throw new \InvalidArgumentException('non-nullable secret cannot be null');
        }
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets session_timeout_length
     *
     * @return int
     */
    public function getSessionTimeoutLength()
    {
        return $this->container['session_timeout_length'];
    }

    /**
     * Sets session_timeout_length
     *
     * @param int $session_timeout_length session_timeout_length
     *
     * @return self
     */
    public function setSessionTimeoutLength($session_timeout_length)
    {
        if (is_null($session_timeout_length)) {
            throw new \InvalidArgumentException('non-nullable session_timeout_length cannot be null');
        }
        $this->container['session_timeout_length'] = $session_timeout_length;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_metadata_schema
     *
     * @return \OpenAPI\Client\Model\UserMetadataField[]
     */
    public function getUserMetadataSchema()
    {
        return $this->container['user_metadata_schema'];
    }

    /**
     * Sets user_metadata_schema
     *
     * @param \OpenAPI\Client\Model\UserMetadataField[] $user_metadata_schema user_metadata_schema
     *
     * @return self
     */
    public function setUserMetadataSchema($user_metadata_schema)
    {
        if (is_null($user_metadata_schema)) {
            throw new \InvalidArgumentException('non-nullable user_metadata_schema cannot be null');
        }
        $this->container['user_metadata_schema'] = $user_metadata_schema;

        return $this;
    }

    /**
     * Gets technologies
     *
     * @return \OpenAPI\Client\Model\Technologies[]
     */
    public function getTechnologies()
    {
        return $this->container['technologies'];
    }

    /**
     * Sets technologies
     *
     * @param \OpenAPI\Client\Model\Technologies[] $technologies technologies
     *
     * @return self
     */
    public function setTechnologies($technologies)
    {
        if (is_null($technologies)) {
            throw new \InvalidArgumentException('non-nullable technologies cannot be null');
        }
        $this->container['technologies'] = $technologies;

        return $this;
    }

    /**
     * Gets element_customization
     *
     * @return \OpenAPI\Client\Model\ElementCustomization
     */
    public function getElementCustomization()
    {
        return $this->container['element_customization'];
    }

    /**
     * Sets element_customization
     *
     * @param \OpenAPI\Client\Model\ElementCustomization $element_customization element_customization
     *
     * @return self
     */
    public function setElementCustomization($element_customization)
    {
        if (is_null($element_customization)) {
            throw new \InvalidArgumentException('non-nullable element_customization cannot be null');
        }
        $this->container['element_customization'] = $element_customization;

        return $this;
    }

    /**
     * Gets element_customization_dark
     *
     * @return \OpenAPI\Client\Model\ElementCustomization
     */
    public function getElementCustomizationDark()
    {
        return $this->container['element_customization_dark'];
    }

    /**
     * Sets element_customization_dark
     *
     * @param \OpenAPI\Client\Model\ElementCustomization $element_customization_dark element_customization_dark
     *
     * @return self
     */
    public function setElementCustomizationDark($element_customization_dark)
    {
        if (is_null($element_customization_dark)) {
            throw new \InvalidArgumentException('non-nullable element_customization_dark cannot be null');
        }
        $this->container['element_customization_dark'] = $element_customization_dark;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


